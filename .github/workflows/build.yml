# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: Build

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      RUST_BACKTRACE: full
      RUST_LOG: debug
    steps:
      - uses: actions/checkout@v2

      - name: Restore Cargo cache
        uses: actions/cache@v2
        with:
          # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cargo-${{ runner.os }}-${{ hashFiles('./Cargo.toml', './Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Test
        run: cargo test

      - name: Build
        run: cargo build --release

      - uses: docker/setup-buildx-action@v1

      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/login-action@v1
        with:
          registry: registry.fly.io
          username: x
          password: ${{ secrets.FLY_API_TOKEN }}

      - id: image-metadata
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/kafji/wmd
            registry.fly.io/wmd
          tags: |
            type=edge,branch=master

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' && steps.image-metadata.outputs.tags != '' }}
          tags: ${{ steps.image-metadata.outputs.tags }}
          labels: ${{ steps.image-metadata.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/kafji/wmd:buildcache
          cache-to: type=registry,ref=ghcr.io/kafji/wmd:buildcache,mode=max

  deploy:
    if: github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 1
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Deploy
        uses: superfly/flyctl-actions@1.3
        with:
          args: "deploy --verbose"
